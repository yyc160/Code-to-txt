using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace MyCodeToTextApp
{
    public class CodeDetector
    {
        // 常见的生成代码关键字
        private static readonly string[] GeneratedKeywords = new[]
        {
            "此代码由工具生成",
            "This code was generated",
            "Auto-generated",
            "自动生成的代码",
            "工具生成的代码",
            "<auto-generated>",
            "// Generated",
            "// Auto-generated",
            "// Designer generated code",
            "Designer.cs",
            ".g.cs",
            ".g.i.cs"
        };

        // 常见的第三方驱动目录名
        private static readonly string[] ThirdPartyDriverDirs = new[]
        {
            "Driver",
            "Dirver", // 项目中的拼写变体
            "SDK",
            "API",
            "ThirdParty",
            "Vendors",
            "External"
        };

        // 设备驱动文件名模式
        private static readonly string[] DeviceDriverPatterns = new[]
        {
            // PLC设备驱动
            @"^C(Siemems|Omron|Delta|Inovance|Lsis|FX[0-9]+[A-Z]*)_(TCP|COM|UDP)\.cs$",
            // 条码读取设备
            @"^C(AS|CR|HK|KS|SR|HW)[0-9]+.*\.cs$",
            // 拧紧工具
            @"^C(ASG|BSM|Danikor|Desoutter|DK|Rexroth).*\.cs$",
            // 测试设备
            @"^C(Chroma|ATEQ|Extech)[0-9]+.*\.cs$",
            // 光源控制
            @"^CLight_(LISHWEI|OPT)\.cs$",
            // RFID设备
            @"^C(BIS_M|CK_[A-Z]+|MIFD|SG_HR).*\.cs$"
        };

        // 常见的第三方库文件
        private static readonly string[] ThirdPartyLibFiles = new[]
        {
            "MQTT",
            "Redis",
            "SQLite",
            "Excel",
            "FTP",
            "HTTP",
            "TCP",
            "UDP",
            "Serial",
            "WebSocket"
        };

        // 要排除的常见目录
        private static readonly string[] ExcludeDirs = new[]
        {
            "obj",
            "bin",
            ".vs",
            "TempPE",
            "packages",
            "node_modules",
            "dist",
            "build"
        };

        public bool ShouldExcludeFile(string filePath)
        {
            try
            {
                // 检查是否在排除目录中
                if (ExcludeDirs.Any(dir => filePath.Contains($"\\{dir}\\") || filePath.Contains($"/{dir}/")))
                {
                    return true;
                }

                // 检查是否在驱动目录中
                if (ThirdPartyDriverDirs.Any(dir => filePath.Contains($"\\{dir}\\") || filePath.Contains($"/{dir}/")))
                {
                    return true;
                }

                string fileName = Path.GetFileName(filePath);

                // 检查是否是生成的代码文件
                if (IsGeneratedFileName(fileName))
                {
                    return true;
                }

                // 检查是否是设备驱动文件
                if (IsDeviceDriverFile(fileName))
                {
                    return true;
                }

                // 检查是否是第三方库文件
                if (IsThirdPartyLibFile(fileName))
                {
                    return true;
                }

                // 检查文件内容中是否包含生成代码标记
                if (File.Exists(filePath))
                {
                    return ContainsGeneratedCodeMarkers(filePath);
                }

                return false;
            }
            catch (Exception)
            {
                // 如果出现任何错误，默认不排除
                return false;
            }
        }

        private bool IsGeneratedFileName(string fileName)
        {
            return fileName.EndsWith(".Designer.cs", StringComparison.OrdinalIgnoreCase)
                || fileName.EndsWith(".generated.cs", StringComparison.OrdinalIgnoreCase)
                || fileName.EndsWith(".g.cs", StringComparison.OrdinalIgnoreCase)
                || fileName.EndsWith(".g.i.cs", StringComparison.OrdinalIgnoreCase)
                || fileName.Equals("AssemblyInfo.cs", StringComparison.OrdinalIgnoreCase)
                || fileName.Contains(".Designer.")
                || fileName.Contains(".Generated.");
        }

        private bool IsDeviceDriverFile(string fileName)
        {
            return DeviceDriverPatterns.Any(pattern =>
                Regex.IsMatch(fileName, pattern, RegexOptions.IgnoreCase));
        }

        private bool IsThirdPartyLibFile(string fileName)
        {
            return ThirdPartyLibFiles.Any(lib =>
                fileName.IndexOf(lib, StringComparison.OrdinalIgnoreCase) >= 0);
        }

        private bool ContainsGeneratedCodeMarkers(string filePath)
        {
            try
            {
                // 只读取文件的前几行来检查
                var firstLines = File.ReadLines(filePath).Take(10).ToList();
                return firstLines.Any(line =>
                    GeneratedKeywords.Any(keyword =>
                        line.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
            }
            catch
            {
                return false;
            }
        }

        public List<string> GetFilesToExclude(string rootPath)
        {
            var filesToExclude = new List<string>();

            try
            {
                // 获取所有.cs文件
                var files = Directory.GetFiles(rootPath, "*.cs", SearchOption.AllDirectories);

                foreach (var file in files)
                {
                    if (ShouldExcludeFile(file))
                    {
                        filesToExclude.Add(file);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"扫描目录时出错: {ex.Message}");
            }

            return filesToExclude;
        }
    }
}